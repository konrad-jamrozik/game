using System.Reflection;
using System.Text.Json.Serialization;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace UfoGameLib.Api;

// kja try to dedup the dependency of this filter on UfoGameLib.State.GameSession.StateJsonSerializerOptions.
/// <summary>
/// This schema filter ensures that OpenAPI schema generated from C# classes is generated properly.
/// This means following transformations:
///
/// - Ensure the schema includes the same fields and properties as determined by
/// UfoGameLib.State.GameSession.StateJsonSerializerOptions.
/// Specifically, it includes fields and excludes members with [JsonIgnore] attribute.
///
/// - Ensure each property is included once, capitalized. This means removing not-capitalized
/// properties. E.g. removing "is" when "Id" is present.
///
/// - Strip inheritors of List, like Agents or Missions, from the extra properties generated by default.
/// </summary>
// ReSharper disable once ClassNeverInstantiated.Global
// Reason: used in Program / builder.Services.AddSwaggerGen / opts.SchemaFilter<...this class...>();
public class GameStateSchemaFilter : ISchemaFilter
{
    private readonly HashSet<Type> _processedTypes = new HashSet<Type>();

    public void Apply(OpenApiSchema schema, SchemaFilterContext context)
    {
        if (_processedTypes.Contains(context.Type)) 
            return;

        _processedTypes.Add(context.Type);

        Type type = context.Type;

        // Console.Out.WriteLine($"===== Processing {type.FullName}");

        schema.Properties ??= new Dictionary<string, OpenApiSchema>();

        MemberInfo[] members = type.GetMembers(BindingFlags.Public | BindingFlags.Instance);

        foreach (MemberInfo member in members)
        {
            // Skip members with [JsonIgnore] attribute
            if (IsJsonIgnore(member))
                continue;

            // Include public properties and public fields.
            if (member is PropertyInfo propertyInfo)
            {
                Console.Out.WriteLine($"Processing Prop  {type}.{member.Name}");
                schema.Properties[propertyInfo.Name] = context.SchemaGenerator.GenerateSchema(
                    propertyInfo.PropertyType,
                    context.SchemaRepository);

                RemoveLowerCasedKey(schema, propertyInfo);
            }
            else if (member is FieldInfo fieldInfo)
            {
                Console.Out.WriteLine($"Processing Field {type}.{member.Name}");
                schema.Properties[fieldInfo.Name] = context.SchemaGenerator.GenerateSchema(
                    fieldInfo.FieldType,
                    context.SchemaRepository);

                RemoveLowerCasedKey(schema, fieldInfo);
            }
            else
            {
                // Do not include other member kinds.
                if (schema.Properties.ContainsKey(member.Name))
                {
                    Console.Out.WriteLine($"Removed other {type}.{member.Name}");
                    schema.Properties.Remove(member.Name);
                }
            }
        }

        StripListInheritorsOfExtraProps(schema, type);
    }

    private static bool IsJsonIgnore(MemberInfo member)
        => member.GetCustomAttribute<JsonIgnoreAttribute>() != null;

    private static void RemoveLowerCasedKey(OpenApiSchema schema, MemberInfo memberInfo)
    {
        string nameWithLower = ToLowerFirstChar(memberInfo.Name);
        if (schema.Properties.ContainsKey(nameWithLower))
        {
            Console.Out.WriteLine($"Removed lower {memberInfo.DeclaringType}.{memberInfo.Name}");
            schema.Properties.Remove(nameWithLower);
        }
    }

    private static string ToLowerFirstChar(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        return char.ToLower(input[0]) + input.Substring(1);
    }

    private static void StripListInheritorsOfExtraProps(OpenApiSchema schema, Type type)
    {
        if (IsSubclassOfGenericType(type, genericType: typeof(List<>)))
        {
            Console.WriteLine($"Stripping {type.FullName} of extra properties.");
            schema.Properties.Clear();
        }
    }

    private static bool IsSubclassOfGenericType(Type? typeToCheck, Type genericType)
    {
        // Check if the typeToCheck is a class and not an interface or abstract class.
        if (typeToCheck is { IsClass: true, IsGenericTypeDefinition: false })
        {
            while (typeToCheck != null)
            {
                if (typeToCheck.IsGenericType && typeToCheck.GetGenericTypeDefinition() == genericType)
                {
                    return true;
                }

                typeToCheck = typeToCheck.BaseType;
            }
        }

        return false;
    }
}